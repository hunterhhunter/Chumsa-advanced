import esbuild from "esbuild";
import process from "process";
import fs from "fs/promises";
import path from "path";
import 'dotenv/config';

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const vaultPluginPath = process.env.OBSIDIAN_PLUGIN_PATH;

if (!vaultPluginPath) {
  console.error("‚ùå Error: OBSIDIAN_PLUGIN_PATH environment variable is not set.");
  console.error("   Please create a .env file with OBSIDIAN_PLUGIN_PATH=<your vault path>");
  process.exit(1);
}

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
  banner: { js: banner },
  entryPoints: ["src/main.ts"],
  bundle: true,
  external: ["obsidian"],
  format: "cjs",
  target: "es2020",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: `${vaultPluginPath}/main.js`,
  platform: 'node',
  define: {
    'process.env.OPENAI_API_KEY': JSON.stringify(process.env.OPENAI_API_KEY)
  }
});

/**
 * Ï†ïÏ†Å ÌååÏùºÏùÑ Vault ÌîåÎü¨Í∑∏Ïù∏ Ìè¥ÎçîÎ°ú Î≥µÏÇ¨
 */
async function copyStaticFiles() {
  const filesToCopy = [
    { src: "manifest.json", dest: "manifest.json", required: true },
    { src: "src/styles.css", dest: "styles.css", required: false }
  ];

  for (const file of filesToCopy) {
    try {
      const destPath = path.join(vaultPluginPath, file.dest);
      await fs.copyFile(file.src, destPath);
      console.log(`‚úÖ Copied: ${file.src} ‚Üí ${file.dest}`);
    } catch (error) {
      if (error.code === 'ENOENT') {
        if (file.required) {
          console.error(`‚ùå Required file missing: ${file.src}`);
          process.exit(1);
        } else {
          console.warn(`‚ö†Ô∏è  Optional file not found: ${file.src} (skipping)`);
        }
      } else {
        console.error(`‚ùå Error copying ${file.src}:`, error.message);
        if (file.required) process.exit(1);
      }
    }
  }
}


if (prod) {
  // Production ÎπåÎìú
  await context.rebuild();
  await copyStaticFiles();
  console.log("‚úÖ Production build complete.");
  await context.dispose();
} else {
  // Development watch Î™®Îìú
  await context.rebuild();
  await copyStaticFiles();
  
  await context.watch();
  console.log("üëÄ Watching for changes...");
}